{"version":3,"sources":["../../../server/bin/www.js"],"names":["serverDebug","port","normalizePort","process","env","PORT","npm_package_config_serverPort","then","app","set","server","createServer","listen","on","onError","onListening","val","parseInt","isNaN","error","syscall","bind","code","exit","addr","address","info"],"mappings":";;AAKA;;;;AACA;;;;AAEA;;;;AACA;;;;;;AAPA;;;AASA,MAAMA,cAAc,qBAAM,eAAN,CAApB;;AAEA;;;;AAIA,MAAMC,OAAOC,cAAcC,QAAQC,GAAR,CAAYC,IAAZ,IAAoBF,QAAQC,GAAR,CAAYE,6BAAhC,IAAgE,MAA9E,CAAb;;AAEA,qBACKC,IADL,CAEMC,OAAO;AACHA,MAAIC,GAAJ,CAAQ,MAAR,EAAgBR,IAAhB;;AAEA;;;;AAIA,QAAMS,SAAS,eAAKC,YAAL,CAAkBH,GAAlB,CAAf;;AAEA;;;;AAIAE,SAAOE,MAAP,CAAcX,IAAd;AACAS,SAAOG,EAAP,CAAU,OAAV,EAAmBC,OAAnB;AACAJ,SAAOG,EAAP,CAAU,WAAV,EAAuBE,YAAYL,MAAZ,CAAvB;AACH,CAlBP;;AAsBA;;;;AAIA,SAASR,aAAT,CAAuBc,GAAvB,EAA4B;AAC1B,QAAMf,OAAOgB,SAASD,GAAT,EAAc,EAAd,CAAb;;AAEA,MAAIE,MAAMjB,IAAN,CAAJ,EAAiB;AACf;AACA,WAAOe,GAAP;AACD;;AAED,MAAIf,QAAQ,CAAZ,EAAe;AACb;AACA,WAAOA,IAAP;AACD;;AAED,SAAO,KAAP;AACD;;AAED;;;;AAIA,SAASa,OAAT,CAAiBK,KAAjB,EAAwB;AACtB,MAAIA,MAAMC,OAAN,KAAkB,QAAtB,EAAgC;AAC9B,UAAMD,KAAN;AACD;;AAED,QAAME,OAAO,OAAOpB,IAAP,KAAgB,QAAhB,GACT,UAAUA,IADD,GAET,UAAUA,IAFd;;AAIA;AACA,UAAQkB,MAAMG,IAAd;AACE,SAAK,QAAL;AACE,uBAAOH,KAAP,CAAaE,OAAO,+BAApB;AACAlB,cAAQoB,IAAR,CAAa,CAAb;AACA;AACF,SAAK,YAAL;AACE,uBAAOJ,KAAP,CAAaE,OAAO,oBAApB;AACAlB,cAAQoB,IAAR,CAAa,CAAb;AACA;AACF;AACE,YAAMJ,KAAN;AAVJ;AAYD;;AAED;;;;AAIA,MAAMJ,cAAcL,UAAU,MAAM;AAClC,QAAMc,OAAOd,OAAOe,OAAP,EAAb;;AAEA,QAAMJ,OAAO,OAAOG,IAAP,KAAgB,QAAhB,GACT,UAAUA,IADD,GAET,UAAUA,KAAKvB,IAFnB;;AAIE,mBAAOyB,IAAP,CAAa,gBAAeL,IAAK,EAAjC;AACArB,cAAa,gBAAeqB,IAAK,EAAjC;AACH,CATD","file":"www.js","sourcesContent":["\n\n/**\n * Module dependencies.\n */\nimport debug from 'debug';\nimport http from 'http';\n\nimport setupApp from '../app';\nimport logger from '../config/logger';\n\nconst serverDebug = debug('server:server');\n\n/**\n * Get port from environment and store in Express.\n */\n\nconst port = normalizePort(process.env.PORT || process.env.npm_package_config_serverPort|| '3001');\n\nsetupApp()\n    .then(\n      app => {\n          app.set('port', port);\n\n          /**\n           * Create HTTP server.\n           */\n\n          const server = http.createServer(app);\n\n          /**\n           * Listen on provided port, on all network interfaces.\n           */\n\n          server.listen(port);\n          server.on('error', onError);\n          server.on('listening', onListening(server));\n      }\n);\n\n\n/**\n * Normalize a port into a number, string, or false.\n */\n\nfunction normalizePort(val) {\n  const port = parseInt(val, 10);\n\n  if (isNaN(port)) {\n    // named pipe\n    return val;\n  }\n\n  if (port >= 0) {\n    // port number\n    return port;\n  }\n\n  return false;\n}\n\n/**\n * Event listener for HTTP server \"error\" event.\n */\n\nfunction onError(error) {\n  if (error.syscall !== 'listen') {\n    throw error;\n  }\n\n  const bind = typeof port === 'string'\n    ? 'Pipe ' + port\n    : 'Port ' + port;\n\n  // handle specific listen errors with friendly messages\n  switch (error.code) {\n    case 'EACCES':\n      logger.error(bind + ' requires elevated privileges');\n      process.exit(1);\n      break;\n    case 'EADDRINUSE':\n      logger.error(bind + ' is already in use');\n      process.exit(1);\n      break;\n    default:\n      throw error;\n  }\n}\n\n/**\n * Event listener for HTTP server \"listening\" event.\n */\n\nconst onListening = server => () => {\n  const addr = server.address();\n\n  const bind = typeof addr === 'string'\n    ? 'pipe ' + addr\n    : 'port ' + addr.port;\n\n    logger.info(`Listening on ${bind}`);\n    serverDebug(`Listening on ${bind}`);\n};\n"]}